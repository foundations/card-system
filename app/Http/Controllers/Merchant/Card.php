<?php
namespace App\Http\Controllers\Merchant; use App\Library\Response; use App\System; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Auth; use Illuminate\Support\Facades\Storage; class Card extends Controller { function get(Request $spceaf29, $sp7a5db5 = false, $sp49bfda = false, $spa6811f = false) { $sp4f4bed = $this->authQuery($spceaf29, \App\Card::class)->with(array('product' => function ($sp4f4bed) { $sp4f4bed->select(array('id', 'name')); })); $sp117844 = $spceaf29->post('search', false); $sp73df55 = $spceaf29->post('val', false); if ($sp117844 && $sp73df55) { if ($sp117844 == 'id') { $sp4f4bed->where('id', $sp73df55); } else { $sp4f4bed->where($sp117844, 'like', '%' . $sp73df55 . '%'); } } $sp8fc58d = (int) $spceaf29->post('category_id'); $spd185cc = $spceaf29->post('product_id', -1); if ($sp8fc58d > 0) { if ($spd185cc > 0) { $sp4f4bed->where('product_id', $spd185cc); } else { $sp4f4bed->whereHas('product', function ($sp4f4bed) use($sp8fc58d) { $sp4f4bed->where('category_id', $sp8fc58d); }); } } $sp5340de = $spceaf29->post('status'); if (strlen($sp5340de)) { $sp4f4bed->whereIn('status', explode(',', $sp5340de)); } $spe5182e = (int) $spceaf29->post('onlyCanSell'); if ($spe5182e) { $sp4f4bed->whereRaw('`count_all`>`count_sold`'); } $sp060035 = $spceaf29->post('type'); if (strlen($sp060035)) { $sp4f4bed->whereIn('type', explode(',', $sp060035)); } $sp2305db = $spceaf29->post('trashed') === 'true'; if ($sp2305db) { $sp4f4bed->onlyTrashed(); } $sp4f4bed->orderByRaw('product_id,type,status'); if ($sp7a5db5 === true) { $sp9def30 = ''; $sp4f4bed->chunk(100, function ($spd3e348) use(&$sp9def30) { foreach ($spd3e348 as $spc9a186) { $sp9def30 .= $spc9a186->card . '
'; } }); $sp4f8b14 = 'export_cards_' . $this->getUserIdOrFail($spceaf29) . '_' . date('YmdHis') . '.txt'; $sp20529e = 'card_export/' . $sp4f8b14; $spb504ee = System::_get('storage_driver'); try { if (!Storage::disk($spb504ee)->put($sp20529e, $sp9def30)) { return Response::fail('文件生成失败'); } } catch (\Exception $spa0e498) { \Log::error('Card.export Exception: ' . $spa0e498->getMessage()); if (config('app.debug')) { return Response::fail($spa0e498->getMessage()); } else { return Response::fail('生成文件失败, 内部错误, 请联系客服'); } } $sp0cd573 = \App\File::insertGetId(array('user_id' => $this->getUserIdOrFail($spceaf29), 'driver' => $spb504ee, 'path' => $sp20529e, 'url' => Storage::disk($spb504ee)->url($sp20529e))); if ($sp0cd573 <= 0) { return Response::fail('数据库繁忙，插入文件记录失败'); } return Response::success($sp0cd573); } else { if ($sp49bfda === true) { if ($sp2305db) { $sp4f4bed->forceDelete(); } else { $sp4f4bed->delete(); } return Response::success(); } else { if ($sp2305db && $spa6811f === true) { $sp4f4bed->restore(); return Response::success(); } else { $sp8485a5 = $spceaf29->post('current_page', 1); $sp1d597f = $spceaf29->post('per_page', 20); $sp1447fb = $sp4f4bed->paginate($sp1d597f, array('*'), 'page', $sp8485a5); return Response::success($sp1447fb); } } } } function export(Request $spceaf29) { return self::get($spceaf29, true); } function export_download($sp0cd573) { $spe4461d = \App\File::findOrFail($sp0cd573); $spe2e14a = Auth::getUser(); if ($spe2e14a->role !== 'admin' && $spe2e14a->id !== $spe4461d->user_id) { $sp9def30 = 'Access Denied'; $sp418d37 = 'your_are_sb.txt'; } else { $spb504ee = System::_get('storage_driver'); $sp9def30 = Storage::disk($spb504ee)->get($spe4461d->path); $sp418d37 = pathinfo($spe4461d->path, PATHINFO_BASENAME); Storage::disk($spb504ee)->delete($spe4461d->path); try { $spe4461d->delete(); } catch (\Exception $spa0e498) { } } $spfc203b = array('Content-type' => 'text/plain', 'Content-Disposition' => sprintf('attachment; filename="%s"', $sp418d37), 'Content-Length' => strlen($sp9def30)); return response()->make($sp9def30, 200, $spfc203b); } function trash(Request $spceaf29) { $sp7824ec = $spceaf29->post('ids', ''); if (strlen($sp7824ec) < 1) { return Response::forbidden(); } $this->authQuery($spceaf29, \App\Card::class)->whereIn('id', explode(',', $sp7824ec))->delete(); return Response::success(); } function deleteTrashed(Request $spceaf29) { $sp7824ec = $spceaf29->post('ids', ''); if (strlen($sp7824ec) < 1) { return Response::forbidden(); } $this->authQuery($spceaf29, \App\Card::class)->whereIn('id', explode(',', $sp7824ec))->forceDelete(); return Response::success(); } function deleteAll(Request $spceaf29) { return $this->get($spceaf29, false, true); } function restoreTrashed(Request $spceaf29) { $sp7824ec = $spceaf29->post('ids', ''); if (strlen($sp7824ec) < 1) { return Response::forbidden(); } $sp4f4bed = $this->authQuery($spceaf29, \App\Card::class); $sp4f4bed->whereIn('id', explode(',', $sp7824ec))->restore(); return Response::success(); } function restoreAll(Request $spceaf29) { return $this->get($spceaf29, false, false, true); } function add(Request $spceaf29) { $spd185cc = (int) $spceaf29->post('product_id'); $spd3e348 = $spceaf29->post('card'); $sp5340de = \App\Card::STATUS_NORMAL; $sp060035 = (int) $spceaf29->post('type', \App\Card::TYPE_ONETIME); $sp741507 = $spceaf29->post('is_check') === 'true'; if (str_contains($spd3e348, '<') || str_contains($spd3e348, '>')) { return Response::fail('卡密不能用 < 或 > 分割'); } if (\App\Card::where('user_id', \Auth::id())->where('status', \App\Card::STATUS_NORMAL)->count() > 10000) { return Response::fail('您的库存卡密已经超过10000张，本次添加失败'); } $spafbdfd = $this->authQuery($spceaf29, \App\Product::class)->findOrFail($spd185cc); if ($sp060035 === \App\Card::TYPE_REPEAT) { if ($sp741507) { if (\App\Card::where('product_id', $spd185cc)->where('card', $spd3e348)->exists()) { return Response::fail('该卡密已经存在，添加失败'); } } $spafbdfd->buy_max = 1; $spafbdfd->saveOrFail(); $spc9a186 = new \App\Card(); $spc9a186->user_id = $this->getUserIdOrFail($spceaf29); $spc9a186->product_id = $spd185cc; $spc9a186->card = $spd3e348; $spc9a186->type = $sp060035; $spc9a186->status = $sp5340de; $spc9a186->count_sold = 0; $spc9a186->count_all = (int) $spceaf29->post('count_all', 1); if ($spc9a186->count_all < 1 || $spc9a186->count_all > 10000000) { return Response::forbidden('可售总次数不能超过10000000'); } $spc9a186->saveOrFail(); } else { $sp7a5ec1 = explode('
', $spd3e348); $sp770d12 = count($sp7a5ec1); $sp7a076c = 50; if ($sp770d12 > $sp7a076c) { return Response::fail('每次添加不能超过 ' . $sp7a076c . ' 张'); } $sp9530f6 = array(); $sp9def30 = ''; for ($sp3f53b5 = 0; $sp3f53b5 < $sp770d12; $sp3f53b5++) { $spc9a186 = trim($sp7a5ec1[$sp3f53b5]); if (strlen($spc9a186) < 1) { continue; } if (strlen($spc9a186) > 100) { return Response::fail('第 ' . $sp3f53b5 . ' 张卡密 ' . $spc9a186 . ' 长度错误<br>卡密最大长度为100'); } if ($sp741507) { if (in_array($spc9a186, $sp9530f6)) { continue; } $sp9530f6[] = $spc9a186; } if ($sp9def30 === '') { $sp9def30 .= $spc9a186; } else { $sp9def30 .= '<' . $spc9a186; } } if ($sp9def30 === '') { return Response::fail('请输入合法的卡密'); } try { \App\Card::add_cards($this->getUserIdOrFail($spceaf29), $spd185cc, $sp060035, $sp5340de, $sp9def30, false); } catch (\Exception $spa0e498) { \Log::error('add_cards, function fatal error: ', array('exception' => $spa0e498)); return Response::fail($spa0e498->getMessage()); } } return Response::success(); } function edit(Request $spceaf29) { $sp7a2170 = (int) $spceaf29->post('id'); $spc9a186 = $spceaf29->post('card'); $sp060035 = (int) $spceaf29->post('type', \App\Card::TYPE_ONETIME); $spc0e8c3 = $this->authQuery($spceaf29, \App\Card::class)->findOrFail($sp7a2170); if ($spc0e8c3) { $spc0e8c3->card = $spc9a186; $spc0e8c3->type = $sp060035; if ($sp060035 === \App\Card::TYPE_REPEAT) { $spafbdfd = $spc0e8c3->product; $spafbdfd->buy_max = 1; $spafbdfd->saveOrFail(); $spc0e8c3->count_all = (int) $spceaf29->post('count_all', 1); } else { $spc0e8c3->count_all = 1; } $spc0e8c3->saveOrFail(); } return Response::success(); } }