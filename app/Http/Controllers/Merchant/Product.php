<?php
namespace App\Http\Controllers\Merchant; use App\Library\Helper; use App\Library\Response; use App\System; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use voku\helper\AntiXSS; class Product extends Controller { function get(Request $spceaf29) { $sp4f4bed = $this->authQuery($spceaf29, \App\Product::class)->with(array('category' => function (Relation $sp4f4bed) { $sp4f4bed->select(array('id', 'name', 'password_open')); }))->with(array('cards' => function (Relation $sp4f4bed) { $sp4f4bed->whereRaw('`count_all`>`count_sold`')->selectRaw('`product_id`,SUM(`count_all`-`count_sold`) as `count`')->groupBy('product_id'); })); $sp117844 = $spceaf29->post('search', false); $sp73df55 = $spceaf29->post('val', false); if ($sp117844 && $sp73df55) { if ($sp117844 == 'simple') { return Response::success($sp4f4bed->where('category_id', $sp73df55)->get(array('id', 'name'))); } elseif ($sp117844 == 'id') { $sp4f4bed->where('id', $sp73df55); } else { $sp4f4bed->where($sp117844, 'like', '%' . $sp73df55 . '%'); } } $sp8fc58d = (int) $spceaf29->post('category_id'); if ($sp8fc58d > 0) { $sp4f4bed->where('category_id', $sp8fc58d); } $spb9f61b = $spceaf29->post('enabled'); if (strlen($spb9f61b)) { $sp4f4bed->whereIn('enabled', explode(',', $spb9f61b)); } $sp8485a5 = $spceaf29->post('current_page', 1); $sp1d597f = $spceaf29->post('per_page', 20); $sp1447fb = $sp4f4bed->orderBy('sort')->paginate($sp1d597f, array('*'), 'page', $sp8485a5); foreach ($sp1447fb->items() as $spafbdfd) { $spafbdfd->setAppends(array('count', 'url')); } return Response::success($sp1447fb); } function sort(Request $spceaf29) { $sp7a2170 = (int) $spceaf29->post('id', -1); if (!$sp7a2170) { return Response::forbidden(); } $spafbdfd = $this->authQuery($spceaf29, \App\Product::class)->findOrFail($sp7a2170); $spafbdfd->sort = (int) $spceaf29->post('sort', 1000); $spafbdfd->save(); return Response::success(); } function category_edit(Request $spceaf29) { $sp7a2170 = (int) $spceaf29->post('id'); $sp8fc58d = (int) $spceaf29->post('category_id'); if (!$sp7a2170 || !$sp8fc58d) { return Response::forbidden(); } $spafbdfd = $this->authQuery($spceaf29, \App\Product::class)->findOrFail($sp7a2170); $spafbdfd->category_id = $sp8fc58d; $spafbdfd->save(); return Response::success(); } function edit(Request $spceaf29) { $sp7a2170 = (int) $spceaf29->post('id'); $sp8fc58d = (int) $spceaf29->post('category_id'); $sp3d006c = $spceaf29->post('name'); $sp94864a = $spceaf29->post('description'); $sp839345 = $spceaf29->post('instructions'); $spac9944 = $spceaf29->post('sort'); $spac9944 = $spac9944 === NULL ? 1000 : (int) $spac9944; $spa7ece3 = (int) $spceaf29->post('count_warn', 0); $sp815b19 = (int) $spceaf29->post('buy_min', 0); $sp239936 = (int) $spceaf29->post('buy_max', 0); $sp932a63 = $spceaf29->post('support_coupon', 0) === 'true'; $sp22d3ef = $spceaf29->post('password'); $sp48ad75 = $spceaf29->post('password_open', 0) === 'true'; $sp20ba68 = (int) ($spceaf29->post('cost') * 100); $sp52e20f = (int) ($spceaf29->post('price') * 100); $sp20da1e = $spceaf29->post('price_whole'); $spb9f61b = (int) $spceaf29->post('enabled'); if (System::_getInt('filter_words_open') === 1) { $sp70a70d = explode('|', System::_get('filter_words')); if (($sp27b5c4 = Helper::filterWords($sp3d006c, $sp70a70d)) !== false) { return Response::fail('提交失败! 商品名称包含敏感词: ' . $sp27b5c4); } if (($sp27b5c4 = Helper::filterWords($sp94864a, $sp70a70d)) !== false) { return Response::fail('提交失败! 商品描述包含敏感词: ' . $sp27b5c4); } if (($sp27b5c4 = Helper::filterWords($sp839345, $sp70a70d)) !== false) { return Response::fail('提交失败! 商品使用说明包含敏感词: ' . $sp27b5c4); } } if ($sp815b19 < 1 || $sp815b19 > 10000) { return Response::fail('最小购买量不能超过10000'); } if ($sp239936 < 1 || $sp239936 > 10000) { return Response::fail('最大购买量不能超过10000'); } if ($spa7ece3 < 0 || $spa7ece3 > 10000000) { return Response::fail('库存预警需要在0-10000000之间'); } if ($spac9944 < 0 || $spac9944 > 10000000) { return Response::fail('排序需要在0-10000000之间'); } if ($sp20ba68 > 1000000000 || $sp52e20f > 1000000000) { return Response::fail('商品价格不能超过10000000, 请重新输入'); } if ($sp20ba68 < 0 || $sp52e20f < 0) { return Response::fail('价格不能为负数'); } $spafbdfd = $this->authQuery($spceaf29, \App\Product::class)->find($sp7a2170); if (!$spafbdfd) { $spafbdfd = new \App\Product(); $spafbdfd->count_sold = 0; $spafbdfd->user_id = $this->getUserIdOrFail($spceaf29); } else { if (\App\Card::whereProductId($spafbdfd->id)->where('type', \App\Card::TYPE_REPEAT)->whereRaw('`count_all`>`count_sold`')->exists()) { if ($sp815b19 !== 1) { return Response::fail('该商品含有重复售卖的卡密, 最小购买量必须为1件'); } if ($sp239936 !== 1) { return Response::fail('该商品含有重复售卖的卡密, 最大购买量必须为1件'); } } } $spafbdfd->category_id = $sp8fc58d; $spafbdfd->name = $sp3d006c; $spc02d14 = new AntiXSS(); $spafbdfd->description = $spc02d14->xss_clean($sp94864a); $spafbdfd->instructions = $spc02d14->xss_clean($sp839345); $spafbdfd->sort = $spac9944; $spafbdfd->buy_min = $sp815b19; $spafbdfd->buy_max = $sp239936; $spafbdfd->count_warn = $spa7ece3; $spafbdfd->support_coupon = $sp932a63; $spafbdfd->password = $sp22d3ef; $spafbdfd->password_open = $sp48ad75; $spafbdfd->cost = $sp20ba68; $spafbdfd->price = $sp52e20f; $spafbdfd->price_whole = $sp20da1e; $spafbdfd->enabled = $spb9f61b; $spafbdfd->saveOrFail(); return Response::success(); } function enable(Request $spceaf29) { $sp7824ec = $spceaf29->post('ids', ''); if (strlen($sp7824ec) < 1) { return Response::forbidden(); } $spb9f61b = (int) $spceaf29->post('enabled'); $this->authQuery($spceaf29, \App\Product::class)->whereIn('id', explode(',', $sp7824ec))->update(array('enabled' => $spb9f61b)); return Response::success(); } function delete(Request $spceaf29) { $sp7824ec = $spceaf29->post('ids', ''); if (strlen($sp7824ec) < 1) { return Response::forbidden(); } $this->authQuery($spceaf29, \App\Product::class)->whereIn('id', explode(',', $sp7824ec))->delete(); return Response::success(); } }