<?php
namespace App\Http\Controllers\Merchant; use App\Http\Controllers\Shop\ApiPay; use App\Library\CurlRequest; use App\Library\FundHelper; use App\Library\Helper; use App\Library\Response; use App\Mail\OrderShipped; use App\System; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Mail; class Order extends Controller { function get(Request $spceaf29) { $sp4f4bed = $this->authQuery($spceaf29, \App\Order::class); $sp8fc58d = (int) $spceaf29->post('category_id'); $spd185cc = (int) $spceaf29->post('product_id'); $spbc71d5 = (int) $spceaf29->post('profit'); $sp689829 = $sp8fc58d === \App\Product::ID_API || $spd185cc === \App\Product::ID_API; $sp117844 = $spceaf29->post('search', false); $sp73df55 = $spceaf29->post('val', false); if ($sp117844 && $sp73df55) { if ($sp117844 == 'id' || $sp117844 == 'order_no' || $sp117844 === 'pay_trade_no' || $sp117844 === 'api_out_no') { $sp4f4bed->where($sp117844, $sp73df55); } else { $sp4f4bed->where($sp117844, 'like', '%' . $sp73df55 . '%'); } } if ($sp8fc58d > 0) { if ($spd185cc > 0) { $sp4f4bed->where('product_id', $spd185cc); } else { $sp4f4bed->whereHas('product', function ($sp4f4bed) use($sp8fc58d) { $sp4f4bed->where('category_id', $sp8fc58d); }); } } $sp529c5b = (int) $spceaf29->post('recent', 0); if ($sp529c5b) { $spa278b8 = (new Carbon())->addDay(-$sp529c5b); $sp4f4bed->where('paid_at', '>=', $spa278b8); } else { $spa278b8 = $spceaf29->post('start_at', false); if (strlen($spa278b8)) { $sp4f4bed->where('paid_at', '>=', $spa278b8 . ' 00:00:00'); } $sp6aee31 = $spceaf29->post('end_at', false); if (strlen($sp6aee31)) { $sp4f4bed->where('paid_at', '<=', $sp6aee31 . ' 23:59:59'); } } if ($spbc71d5) { $sp4f4bed->where('status', \App\Order::STATUS_SUCCESS); $sp9a25ad = clone $sp4f4bed; $spcd3d70 = $sp9a25ad->selectRaw('SUM(`income`) as income, SUM(`income`-`cost`) as profit')->first(); } else { $sp5340de = $spceaf29->post('status'); if (strlen($sp5340de)) { $sp4f4bed->whereIn('status', explode(',', $sp5340de)); } else { $sp4f4bed->where('status', '!=', \App\Order::STATUS_UNPAY); } if ($sp689829) { $sp4f4bed->where('product_id', \App\Product::ID_API); } else { $sp4f4bed->where('product_id', '>', 0); $sp4f4bed->with(array('product' => function (Relation $sp4f4bed) { $sp4f4bed->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $sp4f4bed) { $sp4f4bed->select(array('id', 'card')); })); } } $sp4f4bed->with(array('pay' => function (Relation $sp4f4bed) { $sp4f4bed->select(array('id', 'name')); })); $sp8485a5 = $spceaf29->post('current_page', 1); $sp1d597f = $spceaf29->post('per_page', 20); $sp1447fb = $sp4f4bed->orderBy('id', 'DESC')->paginate($sp1d597f, array('*'), 'page', $sp8485a5); if (!$this->isAdmin()) { foreach ($sp1447fb->items() as $spc73e3b) { $spc73e3b->addHidden(array('system_fee')); } } if ($spbc71d5) { $sp1447fb = $sp1447fb->toArray(); $sp1447fb['profit_sum'] = $spcd3d70; } return Response::success($sp1447fb); } function stat(Request $spceaf29) { $sp024af9 = (int) $spceaf29->input('day', 7); $sp1447fb = $this->authQuery($spceaf29, \App\Order::class)->where(function ($sp4f4bed) { $sp4f4bed->where('status', \App\Order::STATUS_PAID)->orWhere('status', \App\Order::STATUS_SUCCESS); })->where('paid_at', '>=', Helper::getMysqlDate(-$sp024af9 + 1))->groupBy('date')->orderBy('date', 'DESC')->selectRaw('DATE(`paid_at`) as "date",COUNT(*) as "count",SUM(`income`) as "sum"')->get()->toArray(); $sp27b5c4 = array(); foreach ($sp1447fb as $sp83d892) { $sp27b5c4[$sp83d892['date']] = array((int) $sp83d892['count'], (int) $sp83d892['sum']); } return Response::success($sp27b5c4); } function info(Request $spceaf29) { $sp7a2170 = (int) $spceaf29->post('id'); if (!$sp7a2170) { return Response::forbidden(); } $spc73e3b = $this->authQuery($spceaf29, \App\Order::class)->with(array('pay' => function (Relation $sp4f4bed) { $sp4f4bed->select(array('id', 'name')); }, 'card_orders.card' => function (Relation $sp4f4bed) { $sp4f4bed->select(array('id', 'card')); }))->findOrFail($sp7a2170); $spc73e3b->addHidden(array('system_fee')); return Response::success($spc73e3b); } function remark(Request $spceaf29) { $sp7a2170 = (int) $spceaf29->post('id'); if (!$sp7a2170) { return Response::forbidden(); } $spc73e3b = $this->authQuery($spceaf29, \App\Order::class)->findOrFail($sp7a2170); $spc73e3b->remark = $spceaf29->post('remark'); $spc73e3b->save(); return Response::success(); } function ship(Request $spceaf29) { $this->validate($spceaf29, array('id' => 'required|integer')); $spc73e3b = $this->authQuery($spceaf29, \App\Order::class)->findOrFail($spceaf29->post('id')); if ($spc73e3b->status !== \App\Order::STATUS_PAID) { return Response::fail('订单不是待发货状态, 无法发货'); } $sp52706c = null; if (FundHelper::orderSuccess($spc73e3b, function () use(&$spc73e3b, &$sp52706c) { $spc73e3b = \App\Order::where('id', $spc73e3b->id)->lockForUpdate()->firstOrFail(); if ($spc73e3b->cards && count($spc73e3b->cards)) { $sp52706c = '该订单已经发货，无需再次发货'; return false; } $spd3e348 = \App\Card::where('product_id', $spc73e3b->product_id)->whereRaw('`count_sold`<`count_all`')->take($spc73e3b->count)->lockForUpdate()->get(); if (count($spd3e348) !== $spc73e3b->count) { $sp52706c = '商品卡密不足, 请添加卡密后再发货'; return false; } else { $spc73e3b->status = \App\Order::STATUS_SUCCESS; $spc73e3b->saveOrFail(); $sp7e541e = array(); $spa05444 = ''; $sp7a5ec1 = array(); foreach ($spd3e348 as $spc9a186) { $spa05444 .= $spc9a186->card . '<br>'; $sp7e541e[] = $spc9a186->id; $sp7a5ec1[] = array('card' => $spc9a186->card); } $spc73e3b->cards()->attach($sp7e541e); \App\Card::whereIn('id', $sp7e541e)->update(array('status' => \App\Card::STATUS_SOLD, 'count_sold' => DB::raw('`count_sold`+1'))); $sp37aed6 = '订单#' . $spc73e3b->order_no . '&nbsp;已支付，卡号列表：'; $sp1fcb6d = str_replace('
', '<br>', $spa05444); try { \Mail::to($spc73e3b->email)->Queue(new OrderShipped($spc73e3b, $sp37aed6, $sp1fcb6d)); $spc73e3b->email_sent = true; $spc73e3b->saveOrFail(); } catch (\Exception $spa0e498) { \App\Library\LogHelper::setLogFile('mail'); \Log::error('Order.ship error, order_no:' . $spc73e3b->order_no . ', email:' . $spc73e3b->email . ', cards:' . $sp1fcb6d . ', Exception:' . $spa0e498->getMessage()); \App\Library\LogHelper::setLogFile('card'); } $spc73e3b->addHidden(array('system_fee')); $spc73e3b = $spc73e3b->toArray(); $spc73e3b['cards'] = $sp7a5ec1; return \App\Order::STATUS_SUCCESS; } })) { if (!$sp52706c) { return Response::success($spc73e3b); } else { return Response::fail($sp52706c ? $sp52706c : '未知错误'); } } else { \Log::error('Order.ship error, order_no:' . $spc73e3b->order_no); return Response::fail($sp52706c ? $sp52706c : '数据库繁忙, 请联系客服'); } } }