<?php
namespace App\Http\Controllers\Shop; use App\Card; use App\Category; use App\Library\FundHelper; use App\Library\Helper; use App\Product; use App\Library\Response; use App\Library\Pay\Pay as PayApi; use App\Library\Geetest; use App\Mail\OrderShipped; use App\Mail\ProductCountWarn; use App\System; use Carbon\Carbon; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use Illuminate\Support\Facades\Cookie; class Pay extends Controller { public function __construct() { define('SYS_NAME', config('app.name')); define('SYS_URL', config('app.url')); define('SYS_URL_API', config('app.url_api')); } private $payApi = null; public function goPay($spceaf29, $spf13ef6, $sp8db06a, $sp286f3b, $sp5863cf) { try { (new PayApi())->goPay($sp286f3b, $spf13ef6, $sp8db06a, $sp8db06a, $sp5863cf); return self::renderResult($spceaf29, array('success' => false, 'title' => '请稍后', 'msg' => '支付方式加载中，请稍后')); } catch (\Exception $spa0e498) { return self::renderResult($spceaf29, array('msg' => $spa0e498->getMessage())); } } function buy(Request $spceaf29) { if ((int) System::_get('vcode_shop_buy') === 1) { $sp27b5c4 = Geetest\API::verify($spceaf29->input('geetest_challenge'), $spceaf29->input('geetest_validate'), $spceaf29->input('geetest_seccode')); if (!$sp27b5c4) { return self::renderResult($spceaf29, array('msg' => '系统无法接受您的验证结果，请刷新页面后重试。')); } } $spd7b7cc = Cookie::get('customer'); if (strlen($spd7b7cc) !== 32) { return self::renderResult($spceaf29, array('msg' => '请返回页面重新下单')); } $sp8fc58d = (int) $spceaf29->input('category_id'); $spd185cc = (int) $spceaf29->input('product_id'); $spded8d0 = (int) $spceaf29->input('count'); $spc7b1c2 = $spceaf29->input('coupon'); $sp76c44e = $spceaf29->input('email'); $spbcbe57 = (int) $spceaf29->input('pay_id'); if (!$sp8fc58d || !$spd185cc) { return self::renderResult($spceaf29, array('msg' => '请选择商品')); } if (strlen($sp76c44e) < 1) { return self::renderResult($spceaf29, array('msg' => '请输入邮箱')); } $spb34970 = Category::findOrFail($sp8fc58d); if ($spb34970->password_open) { if ($spb34970->password !== $spceaf29->input('category_password')) { return Response::fail('分类密码输入错误'); } } $spafbdfd = Product::where('id', $spd185cc)->where('category_id', $sp8fc58d)->where('enabled', 1)->with(array('cards' => function (Relation $sp4f4bed) { $sp4f4bed->whereRaw('`count_all`>`count_sold`')->selectRaw('`product_id`,SUM(`count_all`-`count_sold`) as `count`')->groupBy('product_id'); }))->first(); if ($spafbdfd == null || $spafbdfd->user == null) { return self::renderResult($spceaf29, array('msg' => '该商品未找到，请重新选择')); } if ($spafbdfd->password_open) { if ($spafbdfd->password !== $spceaf29->input('product_password')) { return Response::fail('分类密码输入错误'); } } if ($spded8d0 < $spafbdfd->buy_min) { return self::renderResult($spceaf29, array('msg' => '该商品最少购买' . $spafbdfd->buy_min . '件，请重新选择')); } if ($spded8d0 > $spafbdfd->buy_max) { return self::renderResult($spceaf29, array('msg' => '该商品限购' . $spafbdfd->buy_max . '件，请重新选择')); } $spafbdfd->setAttribute('count', count($spafbdfd->cards) ? $spafbdfd->cards[0]->count : 0); if ($spafbdfd->count < $spded8d0) { return self::renderResult($spceaf29, array('msg' => '该商品库存不足')); } $sp24c25b = \App\Pay::find($spbcbe57); if ($sp24c25b == null || !$sp24c25b->enabled) { return self::renderResult($spceaf29, array('msg' => '支付方式未找到，请重新选择')); } $sp7de2c2 = $spafbdfd->price; if ($spafbdfd->price_whole) { $sp20da1e = json_decode($spafbdfd->price_whole, true); for ($sp3f53b5 = count($sp20da1e) - 1; $sp3f53b5 >= 0; $sp3f53b5--) { if ($spded8d0 >= (int) $sp20da1e[$sp3f53b5][0]) { $sp7de2c2 = (int) $sp20da1e[$sp3f53b5][1]; break; } } } $sp52e20f = $spded8d0 * $sp7de2c2; $sp5863cf = $sp52e20f; $sp7a7179 = null; if ($spafbdfd->support_coupon && strlen($spc7b1c2) > 0) { $spde79b3 = \App\Coupon::where('user_id', $spafbdfd->user_id)->where('coupon', $spc7b1c2)->where('expire_at', '>', Carbon::now())->whereRaw('`count_used`<`count_all`')->get(); foreach ($spde79b3 as $spc0e8c3) { if ($spc0e8c3->category_id === -1 || $spc0e8c3->category_id === $sp8fc58d && ($spc0e8c3->product_id === -1 || $spc0e8c3->product_id === $spd185cc)) { if ($spc0e8c3->discount_type === \App\Coupon::DISCOUNT_TYPE_AMOUNT && $sp5863cf > $spc0e8c3->discount_val) { $sp7a7179 = $spc0e8c3; $sp5863cf = $sp5863cf - $spc0e8c3->discount_val; break; } if ($spc0e8c3->discount_type === \App\Coupon::DISCOUNT_TYPE_PERCENT) { $sp7a7179 = $spc0e8c3; $sp5863cf = $sp5863cf - intval($sp5863cf * $spc0e8c3->discount_val / 100); break; } } } } if ($sp7a7179) { $sp7a7179->status = \App\Coupon::STATUS_USED; $sp7a7179->count_used++; $sp7a7179->save(); } $sp56f634 = (int) round($sp5863cf * $sp24c25b->fee_system); $spc447e9 = $sp5863cf - $sp56f634; $spf13ef6 = date('YmdHis') . str_random(5); while (\App\Order::whereOrderNo($spf13ef6)->exists()) { $spf13ef6 = date('YmdHis') . str_random(5); } \App\Order::insert(array('user_id' => $spafbdfd->user_id, 'order_no' => $spf13ef6, 'product_id' => $spd185cc, 'count' => $spded8d0, 'email' => $sp76c44e, 'ip' => Helper::getIP(), 'customer' => $spd7b7cc, 'email_sent' => false, 'cost' => $spded8d0 * $spafbdfd->cost, 'price' => $sp52e20f, 'discount' => $sp52e20f - $sp5863cf, 'paid' => $sp5863cf, 'pay_id' => $sp24c25b->id, 'fee' => $sp56f634, 'system_fee' => $sp56f634, 'income' => $spc447e9, 'status' => \App\Order::STATUS_UNPAY, 'created_at' => Carbon::now())); $sp8db06a = $spf13ef6; return $this->goPay($spceaf29, $spf13ef6, $sp8db06a, $sp24c25b, $sp5863cf); } function pay(Request $spceaf29, $spf13ef6) { $spc73e3b = \App\Order::whereOrderNo($spf13ef6)->first(); if ($spc73e3b == null) { return self::renderResult($spceaf29, array('msg' => '订单未找到，请重试')); } if ($spc73e3b->status !== \App\Order::STATUS_UNPAY) { return redirect('/pay/result/' . $spf13ef6); } $spcabe3e = 'pay: ' . $spc73e3b->pay_id; $sp286f3b = $spc73e3b->pay; if (!$sp286f3b) { \Log::error($spcabe3e . ' cannot find Pay'); return $this->renderResult($spceaf29, array('msg' => '支付方式未找到')); } $spcabe3e .= ',' . $sp286f3b->driver; $sp54f11a = json_decode($sp286f3b->config, true); $sp54f11a['payway'] = $sp286f3b->way; $sp54f11a['out_trade_no'] = $spf13ef6; try { $this->payApi = PayApi::getDriver($sp286f3b->id, $sp286f3b->driver); } catch (\Exception $spa0e498) { \Log::error($spcabe3e . ' cannot find Driver: ' . $spa0e498->getMessage()); return $this->renderResult($spceaf29, array('msg' => '支付驱动未找到')); } if ($this->payApi->verify($sp54f11a, function ($spf13ef6, $sp488d84, $spdc4c7a) use($spceaf29) { try { $this->shipOrder($spceaf29, $spf13ef6, $sp488d84, $spdc4c7a, FALSE); } catch (\Exception $spa0e498) { $this->renderResult($spceaf29, array('success' => false, 'msg' => $spa0e498->getMessage())); } })) { \Log::notice($spcabe3e . ' already success' . '

'); return redirect('/pay/result/' . $spf13ef6); } $spafbdfd = Product::where('id', $spc73e3b->product_id)->where('enabled', 1)->with(array('cards' => function (Relation $sp4f4bed) { $sp4f4bed->whereRaw('`count_all`>`count_sold`')->selectRaw('`product_id`,SUM(`count_all`-`count_sold`) as `count`')->groupBy('product_id'); }))->first(); if ($spafbdfd == null) { return self::renderResult($spceaf29, array('msg' => '该商品已下架')); } $spafbdfd->setAttribute('count', count($spafbdfd->cards) ? $spafbdfd->cards[0]->count : 0); if ($spafbdfd->count < $spc73e3b->count) { return self::renderResult($spceaf29, array('msg' => '该商品库存不足')); } $sp8db06a = $spf13ef6; return $this->goPay($spceaf29, $spf13ef6, $sp8db06a, $sp286f3b, $spc73e3b->paid); } function qrcode(Request $spceaf29, $spf13ef6, $sp98283d) { $spc73e3b = \App\Order::whereOrderNo($spf13ef6)->with('product')->first(); if ($spc73e3b == null) { return self::renderResult($spceaf29, array('msg' => '订单未找到，请重试')); } if ($spc73e3b->product_id !== \App\Product::ID_API && $spc73e3b->product == null) { return self::renderResult($spceaf29, array('msg' => '商品未找到，请重试')); } return view('pay/' . $sp98283d, array('pay_id' => $spc73e3b->pay_id, 'name' => $spc73e3b->product_id === \App\Product::ID_API ? $spc73e3b->api_out_no : $spc73e3b->product->name, 'qrcode' => $spceaf29->get('url'), 'id' => $spf13ef6)); } function qrQuery(Request $spceaf29, $spbcbe57) { $spb08a3b = $spceaf29->input('id', ''); return self::payReturn($spceaf29, $spbcbe57, $spb08a3b); } function payReturn(Request $spceaf29, $spbcbe57, $spd2bbfa = '') { $spcabe3e = 'payReturn: ' . $spbcbe57; \Log::debug($spcabe3e); $sp286f3b = \App\Pay::where('id', $spbcbe57)->first(); if (!$sp286f3b) { return $this->renderResult($spceaf29, array('success' => 0, 'msg' => '支付方式错误')); } $spcabe3e .= ',' . $sp286f3b->driver; if (strlen($spd2bbfa) > 0) { $spc73e3b = \App\Order::whereOrderNo($spd2bbfa)->first(); if ($spc73e3b && ($spc73e3b->status === \App\Order::STATUS_PAID || $spc73e3b->status === \App\Order::STATUS_SUCCESS)) { \Log::notice($spcabe3e . ' already success' . '

'); if ($spceaf29->ajax()) { return self::renderResult($spceaf29, array('success' => 1, 'data' => '/pay/result/' . $spd2bbfa), array('order' => $spc73e3b)); } else { return redirect('/pay/result/' . $spd2bbfa); } } } try { $this->payApi = PayApi::getDriver($sp286f3b->id, $sp286f3b->driver); } catch (\Exception $spa0e498) { \Log::error($spcabe3e . ' cannot find Driver: ' . $spa0e498->getMessage()); return $this->renderResult($spceaf29, array('success' => 0, 'msg' => '支付驱动未找到')); } $sp54f11a = json_decode($sp286f3b->config, true); $sp54f11a['out_trade_no'] = $spd2bbfa; $sp54f11a['payway'] = $sp286f3b->way; \Log::debug($spcabe3e . ' will verify'); if ($this->payApi->verify($sp54f11a, function ($spf13ef6, $sp488d84, $spdc4c7a) use($spceaf29, $spcabe3e, &$spd2bbfa) { $spd2bbfa = $spf13ef6; try { \Log::debug($spcabe3e . " shipOrder start, order_no: {$spf13ef6}, amount: {$sp488d84}, trade_no: {$spdc4c7a}"); $this->shipOrder($spceaf29, $spf13ef6, $sp488d84, $spdc4c7a, FALSE); \Log::debug($spcabe3e . ' shipOrder end, order_no: ' . $spf13ef6); } catch (\Exception $spa0e498) { \Log::error($spcabe3e . ' shipOrder Exception: ' . $spa0e498->getMessage()); } })) { \Log::debug($spcabe3e . ' verify finished: 1' . '

'); if ($spceaf29->ajax()) { return self::renderResult($spceaf29, array('success' => 1, 'data' => '/pay/result/' . $spd2bbfa)); } else { return redirect('/pay/result/' . $spd2bbfa); } } else { \Log::debug($spcabe3e . ' verify finished: 0' . '

'); return $this->renderResult($spceaf29, array('success' => 0, 'msg' => '支付验证失败，您可以稍后查看支付状态。')); } } function payNotify(Request $spceaf29, $spbcbe57) { $spcabe3e = 'payNotify pay_id: ' . $spbcbe57; \Log::debug($spcabe3e); $sp286f3b = \App\Pay::where('id', $spbcbe57)->first(); if (!$sp286f3b) { \Log::error($spcabe3e . ' cannot find PayModel'); echo 'fail'; die; } $spcabe3e .= ',' . $sp286f3b->driver; try { $this->payApi = PayApi::getDriver($sp286f3b->id, $sp286f3b->driver); } catch (\Exception $spa0e498) { \Log::error($spcabe3e . ' cannot find Driver: ' . $spa0e498->getMessage()); echo 'fail'; die; } $sp54f11a = json_decode($sp286f3b->config, true); $sp54f11a['payway'] = $sp286f3b->way; $sp54f11a['isNotify'] = true; \Log::debug($spcabe3e . ' will verify'); $sp27b5c4 = $this->payApi->verify($sp54f11a, function ($spf13ef6, $sp488d84, $spdc4c7a) use($spceaf29, $spcabe3e) { try { \Log::debug($spcabe3e . " shipOrder start, order_no: {$spf13ef6}, amount: {$sp488d84}, trade_no: {$spdc4c7a}"); $this->shipOrder($spceaf29, $spf13ef6, $sp488d84, $spdc4c7a, FALSE); \Log::debug($spcabe3e . ' shipOrder end, order_no: ' . $spf13ef6); } catch (\Exception $spa0e498) { \Log::error($spcabe3e . ' shipOrder Exception: ' . $spa0e498->getMessage()); } }); \Log::debug($spcabe3e . ' notify finished: ' . (int) $sp27b5c4 . '

'); die; } function result(Request $spceaf29, $spf13ef6) { $spc73e3b = \App\Order::whereOrderNo($spf13ef6)->first(); if ($spc73e3b == null) { return self::renderResult($spceaf29, array('msg' => '订单未找到，请重试')); } if ($spc73e3b->status === \App\Order::STATUS_PAID) { $spffe0e2 = $spc73e3b->user->qq; $spfb4ab0 = '商家库存不足，因此卡密没有自动发货，请联系商家客服发货'; if ($spffe0e2) { $spfb4ab0 .= '<br><a href="http://wpa.qq.com/msgrd?v=3&uin=' . $spffe0e2 . '&site=qq&menu=yes" target="_blank">商家客服QQ:' . $spffe0e2 . '</a>'; } return self::renderResult($spceaf29, array('success' => false, 'title' => '订单已支付', 'msg' => $spfb4ab0), array('order' => $spc73e3b)); } elseif ($spc73e3b->status === \App\Order::STATUS_SUCCESS) { return $this->shipOrder($spceaf29, $spc73e3b->order_no, $spc73e3b->paid, 0, TRUE); } return self::renderResult($spceaf29, array('success' => false, 'msg' => $spc73e3b->remark ? '失败原因:<br>' . $spc73e3b->remark : '订单支付失败，请重试'), array('order' => $spc73e3b)); } function renderResult(Request $spceaf29, $spfe67da, $spee1379 = array()) { if ($spceaf29->ajax()) { if (@$spfe67da['success']) { return Response::success($spfe67da['data']); } else { return Response::fail('error', $spfe67da['msg']); } } else { return view('pay.result', array_merge(array('result' => $spfe67da, 'data' => $spee1379), $spee1379)); } } function shipOrder($spceaf29, $spf13ef6, $sp488d84, $spdc4c7a, $spa3184f = true) { $spc73e3b = \App\Order::whereOrderNo($spf13ef6)->first(); if ($spc73e3b === null) { \Log::error('shipOrder: No query results for model [App\\Order:' . $spf13ef6 . ',trade_no:' . $spdc4c7a . ',amount:' . $sp488d84 . ']. die(\'success\');'); die('success'); } if ($spc73e3b->paid > $sp488d84) { \Log::alert('shipOrder, price may error, order_no:' . $spf13ef6 . ', paid:' . $spc73e3b->paid . ', $amount get:' . $sp488d84); $spc73e3b->remark = '支付金额(' . sprintf('%0.2f', $sp488d84 / 100) . ') 小于 订单金额(' . sprintf('%0.2f', $spc73e3b->paid / 100) . ')'; $spc73e3b->save(); throw new \Exception($spc73e3b->remark); } $spd3e348 = array(); $sp37aed6 = '订单#' . $spf13ef6 . '&nbsp;已支付，卡号列表：'; $spa05444 = ''; $spafbdfd = null; $sp7873a0 = $spc73e3b->status === \App\Order::STATUS_UNPAY; $sp34825e = $sp7873a0 && System::_getInt('mail_send_order') === 1 && filter_var($spc73e3b->email, FILTER_VALIDATE_EMAIL); if ($sp7873a0) { \Log::debug('shipOrder.first_process:' . $spf13ef6); $spb67edb = $spc73e3b->id; if (FundHelper::orderSuccess($spc73e3b, function () use($spb67edb, $spdc4c7a, &$spd3e348, &$spa05444) { $spc73e3b = \App\Order::where('id', $spb67edb)->lockForUpdate()->firstOrFail(); if ($spc73e3b->status !== \App\Order::STATUS_UNPAY) { \Log::debug('shipOrder.first_process:' . $spc73e3b->order_no . ' already processed!'); return -999; } $spafbdfd = $spc73e3b->product()->lockForUpdate()->firstOrFail(); $spafbdfd->count_sold += $spc73e3b->count; $spafbdfd->saveOrFail(); $spc73e3b->pay_trade_no = $spdc4c7a; $spc73e3b->paid_at = Carbon::now(); $spd3e348 = Card::where('product_id', $spc73e3b->product_id)->whereRaw('`count_sold`<`count_all`')->take($spc73e3b->count)->lockForUpdate()->get(); if (count($spd3e348) !== $spc73e3b->count) { \Log::alert('订单:' . $spc73e3b->order_no . ', 购买数量:' . $spc73e3b->count . ', 卡数量:' . count($spd3e348) . ' 卡密不足(已支付 未发货)'); $spc73e3b->status = \App\Order::STATUS_PAID; $spc73e3b->saveOrFail(); return \App\Order::STATUS_PAID; } else { $spc73e3b->status = \App\Order::STATUS_SUCCESS; $spc73e3b->saveOrFail(); $sp7e541e = array(); foreach ($spd3e348 as $spc9a186) { $spa05444 .= $spc9a186->card . '<br>'; $sp7e541e[] = $spc9a186->id; } $spc73e3b->cards()->attach($sp7e541e); Card::whereIn('id', $sp7e541e)->update(array('status' => Card::STATUS_SOLD, 'count_sold' => \DB::raw('`count_sold`+1'))); return \App\Order::STATUS_SUCCESS; } })) { $spafbdfd = Product::where('id', $spc73e3b->product_id)->with(array('cards' => function (Relation $sp4f4bed) { $sp4f4bed->whereRaw('`count_all`>`count_sold`')->selectRaw('`product_id`,SUM(`count_all`-`count_sold`) as `count`')->groupBy('product_id'); }))->first(); if ($spafbdfd) { $spded8d0 = count($spafbdfd->cards) ? $spafbdfd->cards[0]->count : 0; $spafbdfd->setAttribute('count', $spded8d0); if ($spafbdfd->count_warn > 0 && $spded8d0 < $spafbdfd->count_warn) { try { \Mail::to($spc73e3b->user->email)->Queue(new ProductCountWarn($spafbdfd, $spded8d0)); } catch (\Exception $spa0e498) { \App\Library\LogHelper::setLogFile('mail'); \Log::error('shipOrder.count_warn error, product_id:' . $spc73e3b->product_id . ', email:' . $spc73e3b->user->email . ', Exception:' . $spa0e498); \App\Library\LogHelper::setLogFile('card'); } } } } else { \Log::error('shipOrder.first_process error, order_no:' . $spf13ef6 . ',trade_no:' . $spdc4c7a); throw new \Exception('merchant operate exception!'); } } elseif ($spa3184f) { $spd3e348 = $spc73e3b->cards; $spafbdfd = $spc73e3b->product; foreach ($spd3e348 as $spc9a186) { $spa05444 .= $spc9a186->card . '
'; } } if ($spa3184f || $sp34825e) { if (count($spd3e348) < $spc73e3b->count) { if (count($spd3e348)) { $sp37aed6 = '目前库存不足，您还有' . ($spc73e3b->count - count($spd3e348)) . '张卡密未发货，请联系商家客服发货<br>已发货卡密见下方：<br>'; } else { $sp37aed6 = '目前库存不足，您购买的' . ($spc73e3b->count - count($spd3e348)) . '张卡密未发货，请联系商家客服发货<br>'; } $spffe0e2 = $spc73e3b->user->qq; if ($spffe0e2) { $sp37aed6 .= '<a href="http://wpa.qq.com/msgrd?v=3&uin=' . $spffe0e2 . '&site=qq&menu=yes" target="_blank">商家客服QQ:' . $spffe0e2 . '</a><br>'; } } } if ($sp34825e) { $sp1fcb6d = str_replace('
', '<br>', $spa05444); try { \Mail::to($spc73e3b->email)->Queue(new OrderShipped($spc73e3b, $sp37aed6, $sp1fcb6d)); $spc73e3b->email_sent = true; $spc73e3b->saveOrFail(); } catch (\Exception $spa0e498) { \App\Library\LogHelper::setLogFile('mail'); \Log::error('shipOrder.need_mail error, order_no:' . $spf13ef6 . ', email:' . $spc73e3b->email . ', cards:' . $sp1fcb6d . ', Exception:' . $spa0e498->getMessage()); \App\Library\LogHelper::setLogFile('card'); } } if ($spa3184f) { return self::renderResult($spceaf29, array('success' => true, 'msg' => $sp37aed6), array('card_txt' => $spa05444, 'order' => $spc73e3b, 'product' => $spafbdfd)); } return FALSE; } }