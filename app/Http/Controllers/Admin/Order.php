<?php
namespace App\Http\Controllers\Admin; use App\Library\FundHelper; use App\Library\Helper; use Illuminate\Database\Eloquent\Relations\Relation; use Illuminate\Http\Request; use App\Http\Controllers\Controller; use App\Library\Response; use Illuminate\Support\Facades\DB; use Illuminate\Support\Facades\Log; class Order extends Controller { function stat(Request $spceaf29) { $sp024af9 = (int) $spceaf29->input('day', 7); $sp164718 = $spceaf29->post('profit') === 'true'; $sp4f4bed = \App\Order::where(function ($sp4f4bed) { $sp4f4bed->where('status', \App\Order::STATUS_PAID)->orWhere('status', \App\Order::STATUS_SUCCESS); })->where('paid_at', '>=', Helper::getMysqlDate(-$sp024af9 + 1))->groupBy('date')->orderBy('date', 'DESC'); if ($sp164718) { $sp4f4bed->selectRaw('DATE(`paid_at`) as "date",COUNT(*) as "count",SUM(`fee`-`system_fee`) as "sum"'); } else { $sp4f4bed->selectRaw('DATE(`paid_at`) as "date",COUNT(*) as "count",SUM(`paid`) as "sum"'); } $sp1447fb = $sp4f4bed->get()->toArray(); $sp27b5c4 = array(); foreach ($sp1447fb as $sp83d892) { $sp27b5c4[$sp83d892['date']] = array((int) $sp83d892['count'], (int) $sp83d892['sum']); } return Response::success($sp27b5c4); } public function delete(Request $spceaf29) { $sp7824ec = $spceaf29->post('ids', ''); $spf7c823 = (int) $spceaf29->post('income'); $sp875a9a = (int) $spceaf29->post('balance'); if (strlen($sp7824ec) < 1) { return Response::forbidden(); } \App\Order::whereIn('id', explode(',', $sp7824ec))->chunk(100, function ($spa3f0e4) use($spf7c823, $sp875a9a) { foreach ($spa3f0e4 as $spc73e3b) { $spc73e3b->cards()->detach(); try { if ($spf7c823) { $spc73e3b->fundRecord()->delete(); } if ($sp875a9a) { $spe2e14a = \App\User::lockForUpdate()->firstOrFail(); $spe2e14a->m_all -= $spc73e3b->income; $spe2e14a->saveOrFail(); } $spc73e3b->delete(); } catch (\Exception $spa0e498) { } } }); return Response::success(); } function freeze(Request $spceaf29) { $sp7824ec = $spceaf29->post('ids', ''); if (strlen($sp7824ec) < 1) { return Response::forbidden(); } $sp090ba2 = $spceaf29->post('reason'); $spa3f0e4 = \App\Order::whereIn('id', explode(',', $sp7824ec))->where('status', \App\Order::STATUS_SUCCESS)->get(); $spded8d0 = 0; $sp282faf = 0; foreach ($spa3f0e4 as $spc73e3b) { if (FundHelper::orderFreeze($spc73e3b, $sp090ba2)) { $sp282faf++; } $spded8d0++; } return Response::success(array($spded8d0, $sp282faf)); } function unfreeze(Request $spceaf29) { $sp7824ec = $spceaf29->post('ids', ''); if (strlen($sp7824ec) < 1) { return Response::forbidden(); } $spa3f0e4 = \App\Order::whereIn('id', explode(',', $sp7824ec))->where('status', \App\Order::STATUS_FROZEN)->get(); $spded8d0 = 0; $sp282faf = 0; $spa3e8bf = \App\Order::STATUS_FROZEN; foreach ($spa3f0e4 as $spc73e3b) { if (FundHelper::orderUnfreeze($spc73e3b, '后台操作', null, $spa3e8bf)) { $sp282faf++; } $spded8d0++; } return Response::success(array($spded8d0, $sp282faf, $spa3e8bf)); } function set_paid(Request $spceaf29) { $sp7a2170 = (int) $spceaf29->post('id', ''); if ($sp7a2170 < 1) { return Response::forbidden(); } $spdc4c7a = $spceaf29->post('trade_no', ''); if (strlen($spdc4c7a) < 1) { return Response::forbidden('请输入支付系统内单号'); } $spc73e3b = \App\Order::findOrFail($sp7a2170); if ($spc73e3b->status !== \App\Order::STATUS_UNPAY) { return Response::forbidden('只能操作未支付订单'); } $spcabe3e = 'Admin.SetPaid'; $spf13ef6 = $spc73e3b->order_no; $sp488d84 = $spc73e3b->paid; try { Log::debug($spcabe3e . " shipOrder start, order_no: {$spf13ef6}, amount: {$sp488d84}, trade_no: {$spdc4c7a}"); (new \App\Http\Controllers\Shop\Pay())->shipOrder($spceaf29, $spf13ef6, $sp488d84, $spdc4c7a, FALSE); Log::debug($spcabe3e . ' shipOrder end, order_no: ' . $spf13ef6); $sp282faf = true; $spfb4ab0 = '发货成功'; } catch (\Exception $spa0e498) { $sp282faf = false; $spfb4ab0 = $spa0e498->getMessage(); Log::error($spcabe3e . ' shipOrder Exception: ' . $spa0e498->getMessage()); } $spc73e3b = \App\Order::with(array('card_orders.card' => function (Relation $sp4f4bed) { $sp4f4bed->select(array('id', 'card')); }))->findOrFail($sp7a2170); if ($spc73e3b->status === \App\Order::STATUS_PAID) { $sp282faf = false; $spfb4ab0 = '已标记为付款成功, 但是买家库存不足, 发货失败, 请稍后尝试手动发货'; } return Response::success(array('code' => $sp282faf ? 0 : -1, 'msg' => $spfb4ab0, 'order' => $spc73e3b)); } }